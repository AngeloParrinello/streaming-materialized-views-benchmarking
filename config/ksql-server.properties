# Endpoint configurations
ksql.service.id=nexmark_
listeners=http://0.0.0.0:8088
# For high availability for pull queries. The ksql.advertised.listener configuration specifies
# the URL that is propagated to other nodes for inter-node requests, so it must be reachable from other
# hosts/pods in the cluster. Inter-node requests are critical in a multi-node cluster.
# ksql.advertised.listener=http://host1.example.com:8088
bootstrap.servers=broker:9092

# --- HTTPS Configuration
# To switch KSQL over to communicating using HTTPS comment out the 'listeners' line above
# uncomment and complete the properties below.
# See: https://docs.ksqldb.io/en/latest/operate-and-deploy/installation/server-config/security/#configure-the-cli-for-https
#
# listeners=https://0.0.0.0:8088
# If running a multi-node cluster across multiple machines and 'listeners' is set to a wildcard or loopback address
# 'advertised.listener' must be set to the URL other KSQL nodes should use to reach this node.
# advertised.listener=?
# ssl.keystore.location=?
# ssl.keystore.password=?
# ssl.key.password=?

# Query configurations
ksql.fail.on.deserialization.error=false
ksql.fail.on.production.error=true

# ---- Performance and reliability configs
# Set the batch expiry to Integer.MAX_VALUE to ensure that queries will not
# terminate if the underlying Kafka cluster is unavailable for a period of
# time.
ksql.streams.producer.delivery.timeout.ms=2147483647
# Set the maximum allowable time for the producer to block to
# Long.MAX_VALUE. This allows KSQL to pause processing if the underlying
# Kafka cluster is unavailable.
ksql.streams.producer.max.block.ms=9223372036854775807
# For better fault tolerance and durability, set the replication factor and minimum insync replicas
# for the KSQL Server's internal topics.
# Note: the value 3 requires at least 3 brokers in your Kafka cluster.
ksql.streams.replication.factor=1
ksql.streams.producer.acks=all
ksql.internal.topic.replicas=1
ksql.internal.topic.min.insync.replicas=1
# Bump the number of replicas for state storage for stateful operations
# like aggregations and joins. By having two replicas (one active and one
# standby) recovery from node failures is quicker since the state doesn't
# have to be rebuilt from scratch. This configuration is also essential for
# pull queries to be highly available during node failures
ksql.streams.num.standby.replicas=1
# When standby replicas are >=1^, this parameter controls whether or not a standby can be used for serving read
# requests when the active task (which would normally handle read traffic) is dead.
# Setting to true can help ensure high availability for pull queries.
ksql.query.pull.enable.standby.reads=true
ksql.lag.reporting.enable=true
ksql.heartbeat.enable=true
ksql.query.pull.max.allowed.offset.lag=9223372036854775807
# ksql.streams.processing.guarantee=exactly_once_v2

# ---- Monitoring
ksql.logging.processing.topic.auto.create=true
ksql.logging.processing.stream.auto.create=true
ksql.query.pull.metrics.enabled=true
metrics.recording.level=DEBUG
# Remember to expose the port 1099 for JMX monitoring (e.g. -p 1099:1099)
# ksql.jmx.opts=-Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote -Dcom.sun.management.jmx.remote.port=1099 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=1099